package com.TelecomProject;

import com.TelecomProject_POJO.*;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import org.testng.Assert;
import org.testng.annotations.Test;

public class UserApiTest extends BaseTest {
	private String contactId; // for update/get/delete

    @Test(priority = 1)
    public void AddNewUser() {
        emailId = "anjan" + System.currentTimeMillis() + "@gmail.com";
        UserRequest user = new UserRequest("Anjan", "Roy", emailId, "test@123");

        RegisterResponse response = RestAssured
                .given()
                .contentType(ContentType.JSON)
                .body(user)
                .when()
                .post("/users")
                .then()
                .statusCode(201)
                .extract().as(RegisterResponse.class);

        Assert.assertNotNull(response.getToken(), "Token should not be null");
        Assert.assertEquals(response.getUser().getEmail(), emailId);

        token = response.getToken();
        System.out.println("Generated Token: " + token);
    }

    @Test(priority = 2, dependsOnMethods = "AddNewUser")
    public void GetUserProfile() {
        User response = RestAssured
                .given()
                .header("Authorization", "Bearer " + token)
                .when()
                .get("/users/me")
                .then()
                .statusCode(200)
                .extract().as(User.class);

        Assert.assertEquals(response.getEmail(), emailId);
        System.out.println("User Profile: " + response.getFirstName() + " " + response.getLastName());
    }

    @Test(priority = 3, dependsOnMethods = "AddNewUser")
    public void UpdateUser() {
        String updatedEmail = "anjanr" + System.currentTimeMillis() + "@gmail.com";
        UserRequest updatedUser = new UserRequest("AnjanR", "RoyDa", updatedEmail, "test1234");

        User response = RestAssured
                .given()
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
                .body(updatedUser)
                .when()
                .patch("/users/me")
                .then()
                .statusCode(200)
                .extract().as(User.class);

        Assert.assertEquals(response.getFirstName(), "AnjanR");
        Assert.assertEquals(response.getLastName(), "RoyDa");
        Assert.assertEquals(response.getEmail(), updatedEmail);

        System.out.println("Updated Profile: " + response.getFirstName() + " " + response.getLastName());
    }
    
 // Test Case 4: Login User
    @Test(priority = 4)
    public void testLoginUser() {
        LoginRequest login = new LoginRequest("anjanroy@gmail.com", "test@12345");

        RegisterResponse response = RestAssured
                .given()
                .contentType(ContentType.JSON)
                .body(login)
                .when()
                .post("/users/login")
                .then()
                .statusCode(200)
                .extract().as(RegisterResponse.class);

        Assert.assertNotNull(response.getToken(), "Login token should not be null");
        token = response.getToken();
        System.out.println("Login Token: " + token);
    }
    
    
    
}
